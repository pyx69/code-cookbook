<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Haxe Code Cookbook</title><link>http://code.haxe.org/</link><description>Easy to read Haxe coding examples.</description><managingEditor>contact@haxe.org (Haxe Foundation)</managingEditor><docs>http://blogs.law.harvard.edu/tech/rss</docs><language>en</language><lastBuildDate>Thu, 05 Jan 2017 21:10:19 GMT</lastBuildDate><atom:link href="http://code.haxe.org/rss.xml" rel="self" type="application/rss+xml"/><item><title>Enums as GADTs</title><link>http://code.haxe.org/category/functional-programming/enum-gadt.html</link><guid isPermaLink="true">http://code.haxe.org/category/functional-programming/enum-gadt.html</guid><description>As already established Haxe enums are a form of algebraic data types. In fact, they may even serve as so called generalized algebraic data types - GADTs for short. While for an ordinary enum every constructor yields the same type, with an GADT each constructor may yield a different type. </description><pubDate>Tue, 03 Jan 2017 00:00:00 GMT</pubDate></item><item><title>Generating Arrays with values</title><link>http://code.haxe.org/category/macros/build-arrays.html</link><guid isPermaLink="true">http://code.haxe.org/category/macros/build-arrays.html</guid><description>Sometimes it is useful make your arrays compile-time, for example to embed data from files, to pre-calculate heavy calculations, generating lookup tables and other similar things.  With macros this is perfectly doable but requires some basic knowledge of expression building.  In this article you will find out how to build arrays and return them as expressions in a macro function.</description><pubDate>Tue, 03 Jan 2017 00:00:00 GMT</pubDate></item><item><title>Using maps</title><link>http://code.haxe.org/category/beginner/maps.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/maps.html</guid><description>In Haxe, Map (also known as dictionary) allows key to value mapping for arbitrary value types and many key types. </description><pubDate>Thu, 15 Dec 2016 00:00:00 GMT</pubDate></item><item><title>Using enum / ADT</title><link>http://code.haxe.org/category/beginner/enum-adt.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/enum-adt.html</guid><description>Haxe's enumeration types are algebraic data types. Their primary use is for describing data structures.</description><pubDate>Sun, 30 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Access a field using a string</title><link>http://code.haxe.org/category/beginner/string-variable-reflection.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/string-variable-reflection.html</guid><description>This snippet shows how to use a string as a variable identifier using reflection.</description><pubDate>Thu, 20 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Email address as abstract type</title><link>http://code.haxe.org/category/abstract-types/emailaddress.html</link><guid isPermaLink="true">http://code.haxe.org/category/abstract-types/emailaddress.html</guid><description>The following EmailAddress Abstract type example is based on the underlying standard String type, but sets the restriction that it can only represent a valid email address. If not, an exception will be thrown.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Strict typing for stringly-typed extern code</title><link>http://code.haxe.org/category/abstract-types/abstracts-with-type-params.html</link><guid isPermaLink="true">http://code.haxe.org/category/abstract-types/abstracts-with-type-params.html</guid><description>A common pattern, often found in (but not only in) dynamic languages, is to denote the type of some object with a string, for example:</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Color as abstract type</title><link>http://code.haxe.org/category/abstract-types/color.html</link><guid isPermaLink="true">http://code.haxe.org/category/abstract-types/color.html</guid><description>The following example demonstrates how a color type can be abstracted over an integer, which stores the color in an ARGB format.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Rounded Float as abstract type</title><link>http://code.haxe.org/category/abstract-types/rounded-float.html</link><guid isPermaLink="true">http://code.haxe.org/category/abstract-types/rounded-float.html</guid><description>This abstract type is based on the underlying Float type, but whenever it is converted back to an actual Float it is rounded to avoid the famous rounding errors occuring in floating point aritmetics.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Temperature units as abstract type</title><link>http://code.haxe.org/category/abstract-types/temperature-units.html</link><guid isPermaLink="true">http://code.haxe.org/category/abstract-types/temperature-units.html</guid><description>The following Celcius and Fahrenheit Abstract types are based on the underlying Float type, but sets the restriction that it can never hold values below absolute zero. </description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Using arrays</title><link>http://code.haxe.org/category/beginner/arrays.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/arrays.html</guid><description>In Haxe, the Array type represents a collection of elements ordered by their index (order number) in the collection.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Conditional compilation</title><link>http://code.haxe.org/category/beginner/conditional-compilation.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/conditional-compilation.html</guid><description>This snippet demonstrates use of conditional compilation with custom compiler flags.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Declare classes</title><link>http://code.haxe.org/category/beginner/declare-classes.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/declare-classes.html</guid><description>Create a new class with two functions and create a new instance of it.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Declare functions</title><link>http://code.haxe.org/category/beginner/declare-functions.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/declare-functions.html</guid><description>Declare function with arguments</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Hello world</title><link>http://code.haxe.org/category/beginner/hello-world.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/hello-world.html</guid><description>This tutorial demonstrates how to write and compile a Hello World Haxe program. It explains the involved file-format (.hx) and gives a basic explanation of what the Haxe Compiler does with them.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Using lists</title><link>http://code.haxe.org/category/beginner/lists.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/lists.html</guid><description>In Haxe, the List type represents a linked-list of elements.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Using numbers</title><link>http://code.haxe.org/category/beginner/numbers-floats-ints.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/numbers-floats-ints.html</guid><description>Define integers and floats:</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Using regular expressions</title><link>http://code.haxe.org/category/beginner/regular-expressions.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/regular-expressions.html</guid><description>In Haxe a regular expression starts with ~/ and ends with a single / and is of type EReg.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Using the file system</title><link>http://code.haxe.org/category/beginner/using-filesystem.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/using-filesystem.html</guid><description>These are the Haxe targets that can directly access the filesystem:</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title>Using static extensions</title><link>http://code.haxe.org/category/beginner/using-static-extensions.html</link><guid isPermaLink="true">http://code.haxe.org/category/beginner/using-static-extensions.html</guid><description>The concept of static extensions is a very poweful concept that gives the possibility of keeping types and objects lightweight, and extending them with functionality only when actually needed. Here we will have a look at how some commonly used methods for basic types are implemented as extension methods, and how you can write your own.</description><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item></channel></rss>